name: (CD) Deploy to Server

on:
  workflow_dispatch:
  workflow_run:
    workflows: 
      - (CI) Flask Release
    types:
      - completed
  push:
    branches:
      - main
      - homolog

jobs:
  deploy:
    name: Deploy to Ubuntu Server
    runs-on: self-hosted

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up SSH Key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > /home/gitdeploy/.ssh/id_rsa
        chmod 600 /home/gitdeploy/.ssh/id_rsa

    - name: Create SSH key
      env:
        SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
      run: |
        echo "$SSH_PRIVATE_KEY" > private.key
        sudo chmod 400 private.key

    - name: Add server to known_hosts
      run: |
        eval `ssh-agent -s`
        ssh-add private.key
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> /home/gitdeploy/.ssh/known_hosts

    - name: Install jq
      run: sudo apt install -y jq

    - name: Get Application VERSION
      id: app_version
      run: |
        VERSIONS=$(grep "version" ".cz.toml" | sed -E 's/.*version *= *"([0-9]+\.[0-9]+\.[0-9]+)"/\1/' | tail -n 1)
        echo "VERSIONS=$VERSIONS"
        echo "VERSIONS=$VERSIONS" >> $GITHUB_ENV

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Pull Docker Image from Docker Hub
      run: |
        whoami > WHOAMI
        echo "WHOAMI=$(cat WHOAMI)"
        eval `ssh-agent -s`
        ssh-add private.key 
        sshpass -p "${{ secrets.PSWD }}" ssh -v -i private.key -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}" <<'ENDSSH'
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/docker-dockerhub:python-${{ env.VERSIONS }}
        ENDSSH

    - name: Stop and Remove Existing Container
      run: |
        eval `ssh-agent -s`
        ssh-add private.key 
        sshpass -p "${{ secrets.PSWD }}" ssh -v -i private.key -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}" \
        "docker stop ${{ vars.APPLICATION_NAME }} || true && docker rm ${{ vars.APPLICATION_NAME }} || true"

    - name: Run Docker Container
      run: |
        eval `ssh-agent -s`
        ssh-add private.key 
        sshpass -p "${{ secrets.PSWD }}" ssh -v -i private.key -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}" \
        docker run -d --name ${{ vars.APPLICATION_NAME }} -p 3000:3000 ${{ secrets.DOCKERHUB_USERNAME }}/docker-dockerhub:python-${{ env.VERSIONS }}

    - name: Verify Deployment
      run: |
        eval `ssh-agent -s`
        ssh-add private.key 
        sshpass -p "${{ secrets.PSWD }}" ssh -v -i private.key -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}" \
        "docker ps | grep ${{ vars.APPLICATION_NAME }}

    - name: Restart ${{ vars.APPLICATION_NAME }}
      run: |
        eval `ssh-agent -s`
        ssh-add private.key 
        sshpass -p "${{ secrets.PSWD }}" ssh -v -i private.key -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}" \
        "docker exec ${{ vars.APPLICATION_NAME }} service ${{ vars.APPLICATION_NAME }} restart"

    - name: Clean Cache Images Orfans
      run: |
        eval `ssh-agent -s`
        ssh-add private.key 
        sshpass -p "${{ secrets.PSWD }}" ssh -v -i private.key -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}" \
        "docker image prune -a -f"